#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2013 Canonical Ltd.
# Author: St√©phane Graber <stgraber@ubuntu.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
sys.path.insert(0, os.path.join(sys.path[0], os.pardir, "lib"))

from systemimage import config, tools, tree

import argparse

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="look for orphaned files and remove them")

    parser.add_argument('-n', '--dry-run', help="Don't actually "
                                                "convert/publish any file",
                        action="store_true", default=False)
    parser.add_argument('-q', '--quiet', help="Hide all info messages",
                        action="store_true", default=False)

    args = parser.parse_args()

    conf = config.Config()
    pub = tree.Tree(conf)

    # List all files currently in the tree
    existing_files = set()
    empty_dirs = set()
    for dirpath, dirnames, filenames in os.walk(pub.path):
        if dirpath == "www/gpg":
            continue

        if not filenames and not dirnames:
            empty_dirs.add(dirpath)

        for entry in filenames:
            existing_files.add(os.path.join(dirpath, entry))

    # List all files that are supposed to be in the tree
    listed_files = set()
    listed_files.add(os.path.join(pub.path, "channels.json"))
    listed_files.add(os.path.join(pub.path, "channels.json.asc"))
    for channel, devices in pub.list_channels().items():
        for device_name in devices:
            if 'keyring' in devices[device_name]:
                listed_files.add(os.path.join(
                    pub.path, devices[device_name]['keyring']['path'][1:]))
                listed_files.add(os.path.join(
                    pub.path,
                    devices[device_name]['keyring']['signature'][1:]))

            device = pub.get_device(channel, device_name)

            listed_files.add(os.path.join(device.path, "index.json"))
            listed_files.add(os.path.join(device.path, "index.json.asc"))

            for image in device.list_images():
                for entry in image['files']:
                    listed_files.add(os.path.join(pub.path,
                                                  entry['path'][1:]))
                    listed_files.add(os.path.join(pub.path,
                                                  entry['signature'][1:]))

    # Report missing files and extra files
    if not args.quiet:
        print("=== Orphaned files ===")
        for entry in existing_files - listed_files:
            print(" - %s" % entry)
        print("")

        print("=== Missing files ===")
        for entry in listed_files - existing_files:
            print(" - %s" % entry)
        print("")

    # Remove them
    if not args.dry_run:
        for entry in existing_files - listed_files:
            if not args.quiet:
                print("Removing: %s" % entry)
            os.remove(entry)

        if not args.quiet:
            print("Syncing mirrors")
        tools.sync_mirrors(conf)
